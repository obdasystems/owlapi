package org.semanticweb.owlapi.apitest;

import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.io.IOUtils;

@SuppressWarnings("javadoc")
public class TestFiles {

    private static final String TEST_J = "<http://www.semanticweb.org/owlapi/test#j>";
    private static final String TEST_ANN = "<http://www.semanticweb.org/owlapi/test#ann>";
    private static final String EX_OP = "<http://example.com/objectProperty>";
    private static final String ANN_TEST = "Annotation(" + TEST_ANN + " \"test\"^^xsd:string";
    private static final String TEST_IRI = "<http://www.semanticweb.org/owlapi/test#iri>";
    private static final String TEST_I = "<http://www.semanticweb.org/owlapi/test#i>";
    private static final String TEST_DT = "<http://www.semanticweb.org/owlapi/test#DT>";
    private static final String TEST_C = "<http://www.semanticweb.org/owlapi/test#C>";
    private static final String TEST_P = "<http://www.semanticweb.org/owlapi/test#p>";

    private static String string(String name) {
        try (InputStream in = TestFiles.class.getResourceAsStream(name)) {
            return IOUtils.toString(in, StandardCharsets.UTF_8);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    private static String[] strings(String name) {
        try (InputStream in = TestFiles.class.getResourceAsStream(name)) {
            Iterator<String> readLines = IOUtils.readLines(in, StandardCharsets.UTF_8).iterator();
            List<String> toReturn = new ArrayList<>();
            StringBuilder b = new StringBuilder();
            while (readLines.hasNext()) {
                String line = readLines.next();
                if (line.isEmpty()) {
                    if (b.length() != 0) {
                        toReturn.add(b.toString());
                    }
                    b = new StringBuilder();
                } else {
                    b.append(line).append("\n");
                }
            }
            if (b.length() != 0) {
                toReturn.add(b.toString());
            }
            assert !toReturn.isEmpty();
            return toReturn.toArray(new String[0]);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

//@formatter:off
    public static final String INPUT = string("INPUT.txt");
    public static final String UBERON_CORE = string("UBERON_CORE.txt");
    public static final String UBERON_PATO = string("UBERON_PATO.txt");
    public static final String EMPTY_IMPORT = string("EMPTY_IMPORT.txt");
    public static final String PROPERTY_VALUE_QUOTES_OBO = string("PROPERTY_VALUE_QUOTES_OBO.txt");
    public static final String PROPERTY_VALUE_QUOTES = string("PROPERTY_VALUE_QUOTES.txt");
    public static final String ROUND_TRIP_ALL = string("ROUND_TRIP_ALL.txt");
    public static final String ROUND_TRIP_VERSION_INFO = string("ROUND_TRIP_VERSION_INFO.txt");
    public static final String DECLARED_ANNOTATIONS = string("DECLARED_ANNOTATIONS.txt");
    public static final String UNDECLARED_ANNOTATIONS = string("UNDECLARED_ANNOTATIONS.txt");
    public static final String INPUT_VERSION_LOAD_CHANGE = string("INPUT_VERSION_LOAD_CHANGE.txt");
    public static final String ContainsDatatypesInHeader = string("ContainsDatatypesInHeader.txt");
    public static final String opClassPunning = string("opClassPunning.txt");
    public static final String manSyntaxParserRuleTest = string("manSyntaxParserRuleTest.txt");
    public static final String SaveBaseIRINotOntologyInTurtle = string("SaveBaseIRINotOntologyInTurtle.txt");
    public static final String SaveBaseIRINotOntologyInRioTurtle = string("SaveBaseIRINotOntologyInRioTurtle.txt");
    public static final String BAD_TURTLE = string("BAD_TURTLE.txt");
    public static final String BAD_FUNCTIONAL = string("BAD_FUNCTIONAL.txt");
    public static final String BAD_RDFXML = string("BAD_RDFXML.txt");
    public static final String BAD_OWLXML = string("BAD_OWLXML.txt");
    public static final String BAD_JSON_LD = string("BAD_JSON_LD.txt");
    public static final String BAD_RIO_TURTLE = string("BAD_RIO_TURTLE.txt");
    public static final String BAD_RIO_RDF = string("BAD_RIO_RDF.txt");
    public static final String BAD_NTRIPLES = string("BAD_NTRIPLES.txt");
    public static final String BAD_RDFJSON = string("BAD_RDFJSON.txt");
    public static final String BAD_TRIG = string("BAD_TRIG.txt");
    public static final String BAD_MANCHESTER = string("BAD_MANCHESTER.txt");
    public static final String ontologyIRI = string("ontologyIRI.rdf");
    public static final String nestedAnnotations = string("nestedAnnotations.txt");
    public static final String annotatedAnnotation = string("annotatedAnnotation.txt");
    public static final String anonOneOf = string("anonOneOf.txt");
    public static final String BIGRULE = string("BIGRULE.txt");
    public static final String noDC = string("noDC.txt");
    public static final String lazyDC = string("lazyDC.txt");
    public static final String doubleOntology = string("doubleOntology.txt");
    public static final String BFO = string("BFO.txt");
    public static final String declareDatatypes = string("declareDatatypes.txt");
    public static final String original = string("original.txt");
    public static final String HEAD = string("HEAD.txt");
    public static final String TAIL = string("TAIL.txt");
    public static final String DL_RULE = string("DL_RULE.txt");
    public static final String STRING9 = string("STRING9.txt");
    public static final String STRING8 = string("STRING8.txt");
    public static final String STRING7 = string("STRING7.txt");
    public static final String STRING6 = string("STRING6.txt");
    public static final String STRING5 = string("STRING5.txt");
    public static final String STRING4 = string("STRING4.txt");
    public static final String STRING3 = string("STRING3.txt");
    public static final String STRING2 = string("STRING2.txt");
    public static final String STRING1 = string("STRING1.txt");
    public static final String BROKEN = string("BROKEN.txt");
    public static final String FIXED = string("FIXED.txt");
    public static final String conditionalId = string("conditionalId.txt");
    public static final String unconditionalId = string("unconditionalId.txt");
    public static final String noRemapOnRead = string("noRemapOnRead.txt");
    public static final String oneAnonIndividuall = string("oneAnonIndividuall.txt");
    public static final String remapOnReading = string("remapOnReading.txt");
    public static final String oneIndividual = string("oneIndividual.txt");
    public static final String remapImportRdfXml = string("remapImportRdfXml.txt");
    public static final String remapImport = string("remapImport.txt");
    public static final String unloadableImport = string("unloadableImport.txt");
    public static final String loadRight = string("loadRight.txt");
    public static final String strtransoDom = string("strtransoDom.txt");
    public static final String strtransoRange = string("strtransoRange.txt");
    public static final String strtranssubClass = string("strtranssubClass.txt");
    public static final String strtransbigRule = string("strtransbigRule.txt");
    public static final String strtransdDom = string("strtransdDom.txt");
    public static final String strtransdc = string("strtransdc.txt");
    public static final String strtransdu = string("strtransdu.txt");
    public static final String strtransec = string("strtransec.txt");
    public static final String RDFXML = string("RDFXML.txt");
    public static final String OWLXML = string("OWLXML.txt");
    public static final String FUNCTIONAL = string("FUNCTIONAL.txt");
    public static final String MANCHESTER = string("MANCHESTER.txt");
    public static final String TURTLE = string("TURTLE.txt");
    public static final String[] inputSorting = strings("inputSorting.txt");
    public static final String workingOnto = string("workingOnto.txt");
    public static final String resolveAgainstBase = string("resolveAgainstBase.txt");
    public static final String turtleWithShared = string("turtleWithShared.txt");
    public static final String scientificNotation = string("scientificNotation.txt");
    public static final String emptySpaceInBnode = string("emptySpaceInBnode.txt");
    public static final String axiomAnnotations = string("axiomAnnotations.txt");
    public static final String slashOntologyIRI = string("slashOntologyIRI.txt");
    public static final String presentDeclaration = string("presentDeclaration.txt");
    public static final String missingDeclaration = string("missingDeclaration.txt");
    public static final String prefixAbbreviations = string("prefixAbbreviations.txt");
    public static final String axiomsForBlankNodes = string("axiomsForBlankNodes.txt");
    public static final String correctPrefix = string("correctPrefix.txt");
    public static final String slashPrefix = string("slashPrefix.txt");
    public static final String nnfbigRule = string("nnfbigRule.txt");
    public static final String KOALA = string("KOALA.txt");
    public static final String allowInstanceStanza = string("allowInstanceStanza.txt");
    public static final String forbiddenInput1 = string("forbiddenInput1.txt");
    public static final String forbiddenInput2 = string("forbiddenInput2.txt");
    public static final String ontology = string("ontology.txt");
    public static final String galenFragment = string("galenFragment.txt");
    public static final String violation = string("violation.txt");
    public static final String violationDeclaration = string("violationDeclaration.txt");
    public static final String[] profileFullTestCases = strings("profileFullTestCases.txt");
    public static final String[] profileDLTestCases = strings("profileDLTestCases.txt");
    public static final String[] profileAllTestCases = strings("profileAllTestCases.txt");
    public static final String[] profileELDLTestCases = strings("profileELDLTestCases.txt");
    public static final String[] profileRLDLTestCases = strings("profileRLDLTestCases.txt");
    public static final String[] profileQLDLTestCases = strings("profileQLDLTestCases.txt");
    public static final String[] profileNOQLTestCases = strings("profileNOQLTestCases.txt");
    public static final String[] profileNORLTestCases = strings("profileNORLTestCases.txt");
    public static final String[] profileNOELTestCases = strings("profileNOELTestCases.txt");
    public static final String disjoint4InHTML = string("disjoint4InHTML.txt");
    public static final String disjointTwoInHTML = string("disjointTwoInHTML.txt");
    public static final String disjointInHTML = string("disjointInHTML.txt");
    public static final String renameApUsages = string("renameApUsages.txt");
    public static final String distinctMembers1 = string("distinctMembers1.txt");
    public static final String distinctMembers2 = string("distinctMembers2.txt");
    public static final String IRITestCase = string("IRITestCase.txt");
    public static final String parseSWRL = string("parseSWRL.txt");
    public static final String parseSWRL2 = string("parseSWRL2.txt");
    public static final String individualSWRLTest = string("individualSWRLTest.txt");
    public static final String parseDataProperty = string("parseDataProperty.txt");
    public static final String subPropertiesAsObjectProperties = string("subPropertiesAsObjectProperties.txt");
    public static String lhsSubsetofRhs = string("lhsSubsetofRhs.txt");
    public static String swrlParser = string("swrlParser.txt");
    public static final String cardMultipleDigits = string("cardMultipleDigits.txt");
    public static final String parseMultilineComment = string("parseMultilineComment.txt");
    public static final String parseComment = string("parseComment.txt");
    public static final String annotationTestCase = string("annotationTestCase.txt");
    public static final String roundtripTest = string("roundtripTest.txt");
    public static final String manSyntaxInput = string("manSyntaxInput.txt");
    public static final String manSyntaxRule = string("manSyntaxRule.txt");
    public static final String manSyntaxParserTest = string("manSyntaxParserTest.txt");
    public static final String annotatedAnnotationMansyntax = string("annotatedAnnotationMansyntax.txt");
    public static final String parseSWRLVariable = string("parseSWRLVariable.txt");
    public static final String error1OnStrictParsing = string("error1OnStrictParsing.txt");
    public static final String undeclaredAnnotationPropertyTurtle = string("undeclaredAnnotationPropertyTurtle.txt");
    public static final String undeclaredAnnotationProperty = string("undeclaredAnnotationProperty.txt");
    public static final String largeInteger = string("largeInteger.txt");
    public static final String minusInf = string("minusInf.txt");
    public static final String webOnt = string("webOnt.txt");
    public static final String preamble = string("preamble.txt");
    public static final String closure = string("closure.txt");
    public static final String literalMalformedXML = string("literalMalformedXML.txt");
    public static final String roundtripPaddedLiterals = string("roundtripPaddedLiterals.txt");
    public static final String missingTypes = string("missingTypes.txt");
    public static final String loadOboAnonymous = string("loadOboAnonymous.txt");
    public static final String inputManSyntax = string("inputManSyntax.txt");
    public static final String failWhenTrixBanned = string("failWhenTrixBanned.txt");
    public static final String roundtripUTF8String = string("roundtripUTF8String.txt");
    public static final String INVALID_UTF8 = string("INVALID_UTF8.txt");
    public static final String latexExpectedOutput = string("latexExpectedOutput.txt");
    public static final String latexWithInverse = string("latexWithInverse.txt");
    public static final String latexWithUnderscores = string("latexWithUnderscores.txt");
    public static final String doNotIncludeExternalEntities = string("doNotIncludeExternalEntities.txt");
    public static final String roundtripEntities = string("roundtripEntities.txt");
    public static final String convertToFunctional = string("convertToFunctional.txt");
    public static final String roundtripRIWithQuery = string("roundtripRIWithQuery.txt");
    public static final String moveTest = string("moveTest.txt");
    public static final String parsePlainLiteral = string("parsePlainLiteral.txt");
    public static final String rdfContentForException = string("rdfContentForException.txt");
    public static final String parseDisjointClasses = string("parseDisjointClasses.txt");
    public static final String ontologyVersionParse = string("ontologyVersionParse.txt");
    public static final String uniquePropertiesTurtle = string("uniquePropertiesTurtle.txt");
    public static final String equivalentAndSubclasses = string("equivalentAndSubclasses.txt");
    public static final String premiseOntology = string("premiseOntology.txt");
    public static final String KOALA_STREAM = string("KOALA_STREAM.txt");

    public static final String manShortOnto = "Prefix: : <urn:shortened#>\nOntology: Role1\nClass: Role";
    public static final String FALSE = "\"false\"^^xsd:boolean";
    public static final String CREATED_BY_WITH_SPACE = "ontology: test\n[Typedef]\nid: R:1\nname: r1\ncreated_by: John Doe";
    public static final String IRI = "http://www.semanticweb.org/owlapi/test#iri";
    public static final String IRII = "" + TEST_IRI + "";
    public static final String PREFIX = "http://example.com/ontology/";
    public static final String XY = "http://example.com/ontology/x,y";
    public static final String NS = "http://example.com/ontology";
    public static final String wrong = "rdf:datatype=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral\"";
    public static final String NO_INPUT = "ontology: uberon\n[Term]\nid: X:1\nname: x1\nrelationship: part_of X:2\n\n[Typedef]\nid: part_of\nxref: BFO:0000050";
    public static String objectSomeTemplate = "ObjectSomeValuesFrom(<http://purl.obolibrary.org/obo/BFO_0000051> ObjectIntersectionOf(<http://purl.obolibrary.org/obo/GO_0005886> ObjectSomeValuesFrom(<http://purl.obolibrary.org/obo/BFO_0000051> <http://purl.obolibrary.org/obo/TEST_%s>)))";
    public static final String COMMENT_IN_DATE_1 = "format-version: 1.2\n" + "data-version: beta2 ! WSIO Beta 2\n" + "date: 19:06:2014 18:57 ! CE(S)T";
    public static final String COMMENT_IN_DATE_2 = "format-version: 1.2\n" + "date: 19:06:2014 18:57 ! CE(S)T" + "data-version: beta2 ! WSIO Beta 2\n";
    public static final String ROUND_TRIP_VERSION_INFO_OBO = "format-version: 1.2\nontology: myont\nproperty_value: owl:versionInfo \"2020-06-30\" xsd:string";
    public static final String plainOnto = "Prefix(:=<http://www.example.org/#>)\nOntology(<http://example.org/>\nSubClassOf(:a :b) )";
    public static final String ParseQuotedTripleQuotesLitvalue = "Diadenosine 5',5'''-P1,P4-tetraphosphate phosphorylase";
    public static final String ParseQuotedTripleQuotesWorking = "@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .\n @prefix foaf:    <http://xmlns.com/foaf/0.1/> .\n foaf:fundedBy rdfs:label \"\"\"" + ParseQuotedTripleQuotesLitvalue + "\"\"\"@en .";
    public static final String C = "urn:test:test#c";
    public static final String DB = "http://www.w3.org/2001/XMLSchema#double";
    public static final String DT = "urn:test:test#datatype";
    public static final String DP = "urn:test:test#dp";
    public static final String OP = "urn:test:test#op";
    public static final String ANNSHORT = "http://www.semanticweb.org/owlapi/test#ann";
    public static final String ANNI = "" + TEST_ANN + "";
    public static final String I = "urn:test:test#i";
    public static final String plain = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
    public static final String DONEOF = "DataOneOf(" + FALSE + ")";
    public static final String NOT = "ObjectComplementOf(" + TEST_C + ")";
    public static final String SELF = "ObjectHasSelf(" + EX_OP + ")";
    public static final String ONE = "ObjectOneOf(" + TEST_I + ")";
    public static final String DNOT = "DataComplementOf(DataOneOf(" + FALSE + "))";
    public static final String INVERSE = "ObjectInverseOf(" + EX_OP + ")";
    public static final String BLN = "http://www.w3.org/2001/XMLSchema#boolean";
    public static final String correct = "rdf:parseType=\"Literal\"";
    public static final String string = "http://www.w3.org/2001/XMLSchema#string";
    public static final String doubl = "http://www.w3.org/2001/XMLSchema#double";
    public static final String bool = "http://www.w3.org/2001/XMLSchema#boolean";
    public static final String lang = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
    public static final String BUILT_IN_ATOM = "BuiltInAtom(<urn:test#v2> Variable(<urn:test#var5>) Variable(<urn:test#var6>))";
    public static final String MAXSIX = "facetRestriction(maxExclusive \"6.0\"^^xsd:double)";
    public static final String MIN5 = "facetRestriction(minExclusive \"5.0\"^^xsd:double)";
    public static final String nnfsubClass = "SubClassOf(" + TEST_C + " owl:Thing)";
    public static final String DHAS = "DataHasValue(" + TEST_P + " " + FALSE + ")";
    public static final String SUBD = "SubDataPropertyOf(" + TEST_P + " owl:topDataProperty)";
    public static final String SUBDATA = "SubDataPropertyOf(" + TEST_P + " owl:topDataProperty)";
    public static final String nnfsubData = "SubDataPropertyOf(" + TEST_P + " owl:topDataProperty)";
    public static final String strtranssubData = "SubDataPropertyOf(" + TEST_P + " owl:topDataProperty)";
    public static final String nnfassNotAnon = "ClassAssertion(ObjectComplementOf(" + TEST_C + ") _:id)";
    public static final String DRA = "DataRangeAtom(" + TEST_DT + " Variable(<urn:test#var1>))";
    public static final String DOR = "DataUnionOf(" + TEST_DT + " DataOneOf(" + FALSE + "))";
    public static final String nnfdOneOf = "DataPropertyRange(" + TEST_P + " DataOneOf(" + FALSE + "))";
    public static final String HAS = "ObjectHasValue(" + EX_OP + " " + TEST_I + ")";
    public static final String DAND = "DataIntersectionOf(" + TEST_DT + " DataOneOf(" + FALSE + "))";
    public static final String ALL = "ObjectAllValuesFrom(" + EX_OP + " " + TEST_C + ")";
    public static final String nnfoRange = "ObjectPropertyRange(" + EX_OP + " " + TEST_C + ")";
    public static final String SOME = "ObjectSomeValuesFrom(" + EX_OP + " " + TEST_C + ")";
    public static final String nnfoDom = "ObjectPropertyDomain(" + EX_OP + " " + TEST_C + ")";
    public static final String OR = "ObjectUnionOf(" + TEST_C + " " + TEST_IRI + ")";
    public static final String DSJC = "DisjointClasses(" + TEST_C + " " + TEST_IRI + ")";
    public static final String disjointClasses = "DisjointClasses(" + TEST_C + " " + TEST_IRI + ")";
    public static final String nnfdc = "DisjointClasses(" + TEST_C + " " + TEST_IRI + ")";
    public static final String DALL = "DataAllValuesFrom(" + TEST_P + " " + TEST_DT + ")";
    public static final String nnfdDom = "DataPropertyDomain(" + TEST_P + " " + TEST_C + ")";
    public static final String nnfdRange = "DataPropertyRange(" + TEST_P + " " + TEST_DT + ")";
    public static final String DSOME = "DataSomeValuesFrom(" + TEST_P + " " + TEST_DT + ")";
    public static final String nnfec = "EquivalentClasses(" + TEST_C + " " + TEST_IRI + ")";
    public static final String strtransdOp = "DisjointObjectProperties(" + EX_OP + " " + TEST_IRI + ")";
    public static final String strtranseOp = "EquivalentObjectProperties(" + EX_OP + " " + TEST_IRI + ")";
    public static final String AND = "ObjectIntersectionOf(" + TEST_C + " " + TEST_IRI + ")";
    public static final String DIFF = "DifferentIndividuals(" + TEST_I + " " + TEST_IRI + ")";
    public static final String assDi = "DifferentIndividuals(" + TEST_I + " " + TEST_IRI + ")";
    public static final String nnfassDi = "DifferentIndividuals(" + TEST_I + " " + TEST_IRI + ")";
    public static final String nnfassHasSelf = "ClassAssertion(ObjectHasSelf(" + EX_OP + ") " + TEST_I + ")";
    public static final String strtransiop = "SubObjectPropertyOf(" + EX_OP + " ObjectInverseOf(" + EX_OP + "))";
    public static final String nnfdNot = "DataPropertyRange(" + TEST_P + " DataComplementOf(DataOneOf(" + FALSE + ")))";
    public static final String strtransdDp = "DisjointDataProperties(" + TEST_IRI + " " + TEST_P + ")";
    public static final String strtranseDp = "EquivalentDataProperties(" + TEST_IRI + " " + TEST_P + ")";
    public static final String nnfassOneOf = "ClassAssertion(ObjectOneOf(" + TEST_I + ") " + TEST_I + ")";
    public static final String nnfassNot = "ClassAssertion(ObjectComplementOf(" + TEST_C + ") " + TEST_I + ")";
    public static final String parseOne = "<http://dbpedia.org/resource/South_Africa> <http://dbpedia.org/ontology/areaTotal> 1.0.";
    public static final String MAX = "ObjectMaxCardinality(1 " + EX_OP + " " + TEST_C + ")";
    public static final String OMIN = "ObjectMinCardinality(1 " + EX_OP + " " + TEST_C + ")";
    public static final String OEQ = "ObjectExactCardinality(1 " + EX_OP + " " + TEST_C + ")";
    public static final String dpvar2 = "DataPropertyAtom(" + TEST_P + " Variable(<urn:test#var2>) " + FALSE + ")";
    public static final String opavar2 = "ObjectPropertyAtom(" + EX_OP + " Variable(<urn:test#var2>) Variable(<urn:test#var2>))";
    public static final String DMAX = "DataMaxCardinality(1 " + TEST_P + " " + TEST_DT + ")";
    public static final String DMIN = "DataMinCardinality(1 " + TEST_P + " " + TEST_DT + ")";
    public static final String DEQ = "DataExactCardinality(1 " + TEST_P + " " + TEST_DT + ")";
    public static final String strtransdOneOf = "SubClassOf(owl:Thing DataAllValuesFrom(" + TEST_P + " DataOneOf(" + FALSE + ")))";
    public static final String strtransdRange = "SubClassOf(owl:Thing DataAllValuesFrom(" + TEST_P + " " + TEST_DT + "))";
    public static final String strtransdNot = "SubClassOf(owl:Thing DataAllValuesFrom(" + TEST_P + " DataComplementOf(DataOneOf(" + FALSE + "))))";
    public static final String R = "ReflexiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String REF = "ReflexiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String SYMM = "SymmetricObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String nnfref = "ReflexiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String nnfsymm = "SymmetricObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String strtransref = "ReflexiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String strtranssymm = "SymmetricObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String ASYMM = "AsymmetricObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String FOP = "FunctionalObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String T = "TransitiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String TRANS = "TransitiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String asymmetric = "AsymmetricObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String functionalop = "FunctionalObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String nnfasymm = "AsymmetricObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String nnffop = "FunctionalObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String nnftrans = "TransitiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String strtransasymm = "AsymmetricObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String strtranstrans = "TransitiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String DC = "Declaration(" + ANN_TEST + ") Class(" + TEST_C + "))";
    public static final String IRR = "IrreflexiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String decC = "Declaration(" + ANN_TEST + ") Class(" + TEST_C + "))";
    public static final String irreflexive = "IrreflexiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String nnfdecC = "Declaration(" + ANN_TEST + ") Class(" + TEST_C + "))";
    public static final String nnfirr = "IrreflexiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String strtransdecC = "Declaration(" + ANN_TEST + ") Class(" + TEST_C + "))";
    public static final String strtransirr = "IrreflexiveObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String DOP = "Declaration(" + ANN_TEST + ") ObjectProperty(" + EX_OP + "))";
    public static final String decOp = "Declaration(" + ANN_TEST + ") ObjectProperty(" + EX_OP + "))";
    public static final String nnfdecOp = "Declaration(" + ANN_TEST + ") ObjectProperty(" + EX_OP + "))";
    public static final String strtransdecOp = "Declaration(" + ANN_TEST + ") ObjectProperty(" + EX_OP + "))";
    public static final String DD = "Declaration(" + ANN_TEST + ") Datatype(" + TEST_DT + "))";
    public static final String FDP = "FunctionalDataProperty(" + ANN_TEST + ") " + TEST_P + ")";
    public static final String decDt = "Declaration(" + ANN_TEST + ") Datatype(" + TEST_DT + "))";
    public static final String functionaldp = "FunctionalDataProperty(" + ANN_TEST + ") " + TEST_P + ")";
    public static final String nnfdecDt = "Declaration(" + ANN_TEST + ") Datatype(" + TEST_DT + "))";
    public static final String nnffdp = "FunctionalDataProperty(" + ANN_TEST + ") " + TEST_P + ")";
    public static final String strtransdecDt = "Declaration(" + ANN_TEST + ") Datatype(" + TEST_DT + "))";
    public static final String IFP = "InverseFunctionalObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String inversefp = "InverseFunctionalObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String nnfifp = "InverseFunctionalObjectProperty(" + ANN_TEST + ") " + EX_OP + ")";
    public static final String DDP = "Declaration(" + ANN_TEST + ") DataProperty(" + TEST_P + "))";
    public static final String decDp = "Declaration(" + ANN_TEST + ") DataProperty(" + TEST_P + "))";
    public static final String nnfdecDp = "Declaration(" + ANN_TEST + ") DataProperty(" + TEST_P + "))";
    public static final String nnfdu = "DisjointUnion(" + TEST_C + " " + TEST_C + " " + TEST_IRI + ")";
    public static final String strtransdecDp = "Declaration(" + ANN_TEST + ") DataProperty(" + TEST_P + "))";
    public static final String DIND = "Declaration(" + ANN_TEST + ") NamedIndividual(" + TEST_I + "))";
    public static final String decI = "Declaration(" + ANN_TEST + ") NamedIndividual(" + TEST_I + "))";
    public static final String nnfdecI = "Declaration(" + ANN_TEST + ") NamedIndividual(" + TEST_I + "))";
    public static final String strtransdecI = "Declaration(" + ANN_TEST + ") NamedIndividual(" + TEST_I + "))";
    public static final String nnfdRangeOr = "DataPropertyRange(" + TEST_P + " DataUnionOf(" + TEST_DT + " DataOneOf(" + FALSE + ")))";
    public static final String DANN = "Declaration(" + ANN_TEST + ") AnnotationProperty(" + TEST_ANN + "))";
    public static final String decAp = "Declaration(" + ANN_TEST + ") AnnotationProperty(" + TEST_ANN + "))";
    public static final String nnfassDHas = "ClassAssertion(DataSomeValuesFrom(" + TEST_P + " DataOneOf(" + FALSE + ")) " + TEST_I + ")";
    public static final String nnfdecAp = "Declaration(" + ANN_TEST + ") AnnotationProperty(" + TEST_ANN + "))";
    public static final String strtransdecAp = "Declaration(" + ANN_TEST + ") AnnotationProperty(" + TEST_ANN + "))";
    public static final String nnfdRangeAnd = "DataPropertyRange(" + TEST_P + " DataIntersectionOf(" + TEST_DT + " DataOneOf(" + FALSE + ")))";
    public static final String nnfassAll = "ClassAssertion(ObjectAllValuesFrom(" + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String nnfassSome = "ClassAssertion(ObjectSomeValuesFrom(" + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String nnfassOr = "ClassAssertion(ObjectUnionOf(" + TEST_C + " " + TEST_IRI + ") " + TEST_I + ")";
    public static final String nnfassDAll = "ClassAssertion(DataAllValuesFrom(" + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String nnfassDSome = "ClassAssertion(DataSomeValuesFrom(" + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String nnfassAnd = "ClassAssertion(ObjectIntersectionOf(" + TEST_C + " " + TEST_IRI + ") " + TEST_I + ")";
    public static final String nnfassHas = "ClassAssertion(ObjectSomeValuesFrom(" + EX_OP + " ObjectOneOf(" + TEST_I + ")) " + TEST_I + ")";
    public static final String anonTurtle = "_:foo <http://example.com/> _:bar .";
    public static final String quotes4 = "<urn:test#s> <urn:test#p> \"\"\"\"\"\\\"\"\"\" .";
    public static final String quotes5 = "<urn:test#s> <urn:test#p> \"\"\"\"\"\\u0061\"\"\" .";
    public static final String parseTwo = "<http://dbpedia.org/resource/South_Africa> <http://dbpedia.org/ontology/areaTotal> 1 .";
    public static final String scientificNotationPlus = "<http://dbpedia.org/resource/South_Africa> <http://dbpedia.org/ontology/areaTotal> 1e+07 .";
    public static final String scientificNotationWithMinus = "<http://dbpedia.org/resource/South_Africa> <http://dbpedia.org/ontology/areaTotal> 1e-07 .";
    public static final String strtransfop = "SubClassOf(owl:Thing ObjectMaxCardinality(1 " + EX_OP + " owl:Thing))";
    public static final String strtransfdp = "SubClassOf(owl:Thing DataMaxCardinality(1 " + TEST_P + " rdfs:Literal))";
    public static final String literalXMl = "<div xmlns='http://www.w3.org/1999/xhtml'><h3>[unknown]</h3><p>(describe NameGroup \"[unknown]\")</p></div>";
    public static final String strtransifp = "SubClassOf(owl:Thing ObjectMaxCardinality(1 ObjectInverseOf(" + EX_OP + ") owl:Thing))";
    public static final String SUBC = "SubClassOf(" + ANN_TEST + ") " + TEST_C + " owl:Thing)";
    public static final String SUBCLASS = "SubClassOf(" + ANN_TEST + ") " + TEST_C + " owl:Thing)";
    public static final String DTD = "DatatypeDefinition(" + ANN_TEST + ") " + TEST_DT + " xsd:double)";
    public static final String dDef = "DatatypeDefinition(" + ANN_TEST + ") " + TEST_DT + " xsd:double)";
    public static final String nnfdDef = "DatatypeDefinition(" + ANN_TEST + ") " + TEST_DT + " xsd:double)";
    public static final String strtransdDef = "DatatypeDefinition(" + ANN_TEST + ") " + TEST_DT + " xsd:double)";
    public static final String SUBOBJECT = "SubObjectPropertyOf(" + ANN_TEST + ") " + EX_OP + " owl:topObjectProperty)";
    public static final String SUBOP = "SubObjectPropertyOf(" + ANN_TEST + ") " + EX_OP + " owl:topObjectProperty)";
    public static final String nnfsubObject = "SubObjectPropertyOf(" + ANN_TEST + ") " + EX_OP + " owl:topObjectProperty)";
    public static final String strtranssubObject = "SubObjectPropertyOf(" + ANN_TEST + ") " + EX_OP + " owl:topObjectProperty)";
    public static final String SUBA = "SubAnnotationPropertyOf(" + ANN_TEST + ") " + TEST_ANN + " rdfs:label)";
    public static final String SUBANN = "SubAnnotationPropertyOf(" + ANN_TEST + ") " + TEST_ANN + " rdfs:label)";
    public static final String nnfsubAnn = "SubAnnotationPropertyOf(" + ANN_TEST + ") " + TEST_ANN + " rdfs:label)";
    public static final String strtranssubAnn = "SubAnnotationPropertyOf(" + ANN_TEST + ") " + TEST_ANN + " rdfs:label)";
    public static final String ACNOT = "ClassAssertion(" + ANN_TEST + ") ObjectComplementOf(" + TEST_C + ") _:id)";
    public static final String ASSNOTANON = "ClassAssertion(" + ANN_TEST + ") ObjectComplementOf(" + TEST_C + ") _:id)";
    public static final String nnfassMax = "ClassAssertion(ObjectMaxCardinality(1 " + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String nnfassMin = "ClassAssertion(ObjectMinCardinality(1 " + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String nnfassDMax = "ClassAssertion(DataMaxCardinality(1 " + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String nnfassDMin = "ClassAssertion(DataMinCardinality(1 " + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String ADONEOF = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DataOneOf(" + FALSE + "))";
    public static final String dataOneOf = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DataOneOf(" + FALSE + "))";
    public static final String IOP = "InverseObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + EX_OP + ")";
    public static final String inverseop = "InverseObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + EX_OP + ")";
    public static final String nnfiop = "InverseObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + EX_OP + ")";
    public static final String strtransdRangeOr = "SubClassOf(owl:Thing DataAllValuesFrom(" + TEST_P + " DataUnionOf(" + TEST_DT + " DataOneOf(" + FALSE + "))))";
    public static final String OPR = "ObjectPropertyRange(" + ANN_TEST + ") " + EX_OP + " " + TEST_C + ")";
    public static final String ORANGE = "ObjectPropertyRange(" + ANN_TEST + ") " + EX_OP + " " + TEST_C + ")";
    public static final String ODOM = "ObjectPropertyDomain(" + ANN_TEST + ") " + EX_OP + " " + TEST_C + ")";
    public static final String OPD = "ObjectPropertyDomain(" + ANN_TEST + ") " + EX_OP + " " + TEST_C + ")";
    public static final String ACL = "ClassAssertion(" + ANN_TEST + ") " + TEST_C + " " + TEST_I + ")";
    public static final String ASS = "ClassAssertion(" + ANN_TEST + ") " + TEST_C + " " + TEST_I + ")";
    public static final String nnfass = "ClassAssertion(" + ANN_TEST + ") " + TEST_C + " " + TEST_I + ")";
    public static final String SAME = "SameIndividual(" + ANN_TEST + ") " + TEST_I + " " + TEST_IRI + ")";
    public static final String nnfsame = "SameIndividual(" + ANN_TEST + ") " + TEST_I + " " + TEST_IRI + ")";
    public static final String strtransdRangeAnd = "SubClassOf(owl:Thing DataAllValuesFrom(" + TEST_P + " DataIntersectionOf(" + TEST_DT + " DataOneOf(" + FALSE + "))))";
    public static final String DPR = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " " + TEST_DT + ")";
    public static final String dDom = "DataPropertyDomain(" + ANN_TEST + ") " + TEST_P + " " + TEST_C + ")";
    public static final String dRange = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " " + TEST_DT + ")";
    public static final String dpdomain = "DataPropertyDomain(" + ANN_TEST + ") " + TEST_P + " " + TEST_C + ")";
    public static final String DSJOP = "DisjointObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + TEST_IRI + ")";
    public static final String EQC = "EquivalentClasses(" + ANN_TEST + ") " + TEST_C + " " + TEST_IRI + ")";
    public static final String disjointOp = "DisjointObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + TEST_IRI + ")";
    public static final String ec = "EquivalentClasses(" + ANN_TEST + ") " + TEST_C + " " + TEST_IRI + ")";
    public static final String nnfdOp = "DisjointObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + TEST_IRI + ")";
    public static final String EQOP = "EquivalentObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + TEST_IRI + ")";
    public static final String eOp = "EquivalentObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + TEST_IRI + ")";
    public static final String nnfeOp = "EquivalentObjectProperties(" + ANN_TEST + ") " + EX_OP + " " + TEST_IRI + ")";
    public static final String ASELF = "ClassAssertion(" + ANN_TEST + ") ObjectHasSelf(" + EX_OP + ") " + TEST_I + ")";
    public static final String ASSHASSELF = "ClassAssertion(" + ANN_TEST + ") ObjectHasSelf(" + EX_OP + ") " + TEST_I + ")";
    public static final String DISJDP = "DisjointDataProperties(" + ANN_TEST + ") " + TEST_IRI + " " + TEST_P + ")";
    public static final String DPRNOT = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DataComplementOf(DataOneOf(" + FALSE + ")))";
    public static final String dataNot = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DataComplementOf(DataOneOf(" + FALSE + ")))";
    public static final String disjointDp = "DisjointDataProperties(" + ANN_TEST + ") " + TEST_IRI + " " + TEST_P + ")";
    public static final String nnfdDp = "DisjointDataProperties(" + ANN_TEST + ") " + TEST_IRI + " " + TEST_P + ")";
    public static final String EQDP = "EquivalentDataProperties(" + ANN_TEST + ") " + TEST_IRI + " " + TEST_P + ")";
    public static final String eDp = "EquivalentDataProperties(" + ANN_TEST + ") " + TEST_IRI + " " + TEST_P + ")";
    public static final String nnfeDp = "EquivalentDataProperties(" + ANN_TEST + ") " + TEST_IRI + " " + TEST_P + ")";
    public static final String ANNRANGE = "AnnotationPropertyRange(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + ")";
    public static final String AONE = "ClassAssertion(" + ANN_TEST + ") ObjectOneOf(" + TEST_I + ") " + TEST_I + ")";
    public static final String APR = "AnnotationPropertyRange(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + ")";
    public static final String ASSONEOF = "ClassAssertion(" + ANN_TEST + ") ObjectOneOf(" + TEST_I + ") " + TEST_I + ")";
    public static final String nnfannRange = "AnnotationPropertyRange(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + ")";
    public static final String strtransannRange = "AnnotationPropertyRange(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + ")";
    public static final String ANNDOM = "AnnotationPropertyDomain(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + ")";
    public static final String APD = "AnnotationPropertyDomain(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + ")";
    public static final String nnfannDom = "AnnotationPropertyDomain(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + ")";
    public static final String strtransannDom = "AnnotationPropertyDomain(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + ")";
    public static final String ASSNOT = "ClassAssertion(" + ANN_TEST + ") ObjectComplementOf(" + TEST_C + ") " + TEST_I + ")";
    public static final String CNOT = "ClassAssertion(" + ANN_TEST + ") ObjectComplementOf(" + TEST_C + ") " + TEST_I + ")";
    public static final String quotes6 = "<urn:test#s> <urn:test#p> \"\"\"3'''-acetate; [cut]\"\"\"^^xsd:string .";
    public static final String MINMXSIX = "DatatypeRestriction(xsd:double facetRestriction(minExclusive \"5.0\"^^xsd:double) facetRestriction(maxExclusive \"6.0\"^^xsd:double))";
    public static final String adp = "DataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " \"string\"@en)";
    public static final String assDPlain = "DataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " \"string\"@en)";
    public static final String nnfassDPlain = "DataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " \"string\"@en)";
    public static final String strtransassDPlain = "DataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " \"string\"@en)";
    public static final String assD = "DataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " " + FALSE + ")";
    public static final String dpafalse = "DataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " " + FALSE + ")";
    public static final String nnfassD = "DataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " " + FALSE + ")";
    public static final String strtransassD = "DataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " " + FALSE + ")";
    public static final String AANN = "AnnotationAssertion(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + " " + FALSE + ")";
    public static final String ANN = "AnnotationAssertion(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + " " + FALSE + ")";
    public static final String nnfann = "AnnotationAssertion(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + " " + FALSE + ")";
    public static final String strtransann = "AnnotationAssertion(" + ANN_TEST + ") " + TEST_ANN + " " + TEST_IRI + " " + FALSE + ")";
    public static final String ADHAS = "ClassAssertion(" + ANN_TEST + ") DataHasValue(" + TEST_P + " " + FALSE + ") " + TEST_I + ")";
    public static final String assDHas = "ClassAssertion(" + ANN_TEST + ") DataHasValue(" + TEST_P + " " + FALSE + ") " + TEST_I + ")";
    public static final String ANDP = "NegativeDataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " " + FALSE + ")";
    public static final String ndp = "NegativeDataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " " + FALSE + ")";
    public static final String nnfndp = "NegativeDataPropertyAssertion(" + ANN_TEST + ") " + TEST_P + " " + TEST_I + " " + FALSE + ")";
    public static final String DU = "DisjointUnion(" + ANN_TEST + ") " + TEST_C + " " + TEST_C + " " + TEST_IRI + ")";
    public static final String disjointu = "DisjointUnion(" + ANN_TEST + ") " + TEST_C + " " + TEST_C + " " + TEST_IRI + ")";
    public static final String AOP = "ObjectPropertyAssertion(" + ANN_TEST + ") " + EX_OP + " " + TEST_I + " " + TEST_I + ")";
    public static final String nnfopa = "ObjectPropertyAssertion(" + ANN_TEST + ") " + EX_OP + " " + TEST_I + " " + TEST_I + ")";
    public static final String opa = "ObjectPropertyAssertion(" + ANN_TEST + ") " + EX_OP + " " + TEST_I + " " + TEST_I + ")";
    public static final String strtransopa = "ObjectPropertyAssertion(" + ANN_TEST + ") " + EX_OP + " " + TEST_I + " " + TEST_I + ")";
    public static final String DPROR = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DataUnionOf(" + TEST_DT + " DataOneOf(" + FALSE + ")))";
    public static final String DRANGEOR = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DataUnionOf(" + TEST_DT + " DataOneOf(" + FALSE + ")))";
    public static final String ACHAS = "ClassAssertion(" + ANN_TEST + ") ObjectHasValue(" + EX_OP + " " + TEST_I + ") " + TEST_I + ")";
    public static final String ASSHAS = "ClassAssertion(" + ANN_TEST + ") ObjectHasValue(" + EX_OP + " " + TEST_I + ") " + TEST_I + ")";
    public static final String ANOP = "NegativeObjectPropertyAssertion(" + ANN_TEST + ") " + EX_OP + " " + TEST_I + " " + TEST_I + ")";
    public static final String nnfnop = "NegativeObjectPropertyAssertion(" + ANN_TEST + ") " + EX_OP + " " + TEST_I + " " + TEST_I + ")";
    public static final String nop = "NegativeObjectPropertyAssertion(" + ANN_TEST + ") " + EX_OP + " " + TEST_I + " " + TEST_I + ")";
    public static final String DPRAND = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DataIntersectionOf(" + TEST_DT + " DataOneOf(" + FALSE + ")))";
    public static final String DRANGEAND = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DataIntersectionOf(" + TEST_DT + " DataOneOf(" + FALSE + ")))";
    public static final String ACALL = "ClassAssertion(" + ANN_TEST + ") ObjectAllValuesFrom(" + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String ASSALL = "ClassAssertion(" + ANN_TEST + ") ObjectAllValuesFrom(" + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String CHAIN = "SubObjectPropertyOf(" + ANN_TEST + ") ObjectPropertyChain(" + TEST_IRI + " " + EX_OP + ") " + EX_OP + ")";
    public static final String SUBO = "SubObjectPropertyOf(" + ANN_TEST + ") ObjectPropertyChain(" + TEST_IRI + " " + EX_OP + ") " + EX_OP + ")";
    public static final String nnfchain = "SubObjectPropertyOf(" + ANN_TEST + ") ObjectPropertyChain(" + TEST_IRI + " " + EX_OP + ") " + EX_OP + ")";
    public static final String strtranschain = "SubObjectPropertyOf(" + ANN_TEST + ") ObjectPropertyChain(" + TEST_IRI + " " + EX_OP + ") " + EX_OP + ")";
    public static final String ACSOME = "ClassAssertion(" + ANN_TEST + ") ObjectSomeValuesFrom(" + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String ASSSOME = "ClassAssertion(" + ANN_TEST + ") ObjectSomeValuesFrom(" + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String ACLOR = "ClassAssertion(" + ANN_TEST + ") ObjectUnionOf(" + TEST_C + " " + TEST_IRI + ") " + TEST_I + ")";
    public static final String ASSOR = "ClassAssertion(" + ANN_TEST + ") ObjectUnionOf(" + TEST_C + " " + TEST_IRI + ") " + TEST_I + ")";
    public static final String AOINV = "ObjectPropertyAssertion(" + ANN_TEST + ") ObjectInverseOf(" + EX_OP + ") " + TEST_I + " " + TEST_I + ")";
    public static final String AOPJ = "ObjectPropertyAssertion(" + ANN_TEST + ") ObjectInverseOf(" + EX_OP + ") " + TEST_I + " " + TEST_J + ")";
    public static final String OPAINV = "ObjectPropertyAssertion(" + ANN_TEST + ") ObjectInverseOf(" + EX_OP + ") " + TEST_I + " " + TEST_I + ")";
    public static final String OPAINVJ = "ObjectPropertyAssertion(" + ANN_TEST + ") ObjectInverseOf(" + EX_OP + ") " + TEST_I + " " + TEST_J + ")";
    public static final String nnfopaInv = "ObjectPropertyAssertion(" + ANN_TEST + ") ObjectInverseOf(" + EX_OP + ") " + TEST_I + " " + TEST_I + ")";
    public static final String nnfopaInvj = "ObjectPropertyAssertion(" + ANN_TEST + ") ObjectInverseOf(" + EX_OP + ") " + TEST_I + " " + TEST_J + ")";
    public static final String strtransopaInv = "ObjectPropertyAssertion(" + ANN_TEST + ") ObjectInverseOf(" + EX_OP + ") " + TEST_I + " " + TEST_I + ")";
    public static final String strtransopaInvj = "ObjectPropertyAssertion(" + ANN_TEST + ") ObjectInverseOf(" + EX_OP + ") " + TEST_I + " " + TEST_J + ")";
    public static final String ADALL = "ClassAssertion(" + ANN_TEST + ") DataAllValuesFrom(" + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String assDAll = "ClassAssertion(" + ANN_TEST + ") DataAllValuesFrom(" + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String ADSOME = "ClassAssertion(" + ANN_TEST + ") DataSomeValuesFrom(" + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String assDSome = "ClassAssertion(" + ANN_TEST + ") DataSomeValuesFrom(" + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String ACLAND = "ClassAssertion(" + ANN_TEST + ") ObjectIntersectionOf(" + TEST_C + " " + TEST_IRI + ") " + TEST_I + ")";
    public static final String ASSAND = "ClassAssertion(" + ANN_TEST + ") ObjectIntersectionOf(" + TEST_C + " " + TEST_IRI + ") " + TEST_I + ")";
    public static final String quotes1 = "<urn:test#s> <urn:test#p> ''' ''\\' ''' .";
    public static final String quotes2 = "<urn:test#s> <urn:test#p> \"\"\" \"\"\\\" \"\"\" .";
    public static final String quotes3 = "<urn:test#s> <urn:test#p> \"\"\" \"\"\\u0061 \"\"\" .";
    public static final String FIVE = "\"5.0\"^^xsd:double";
    public static final String SIX = "\"6.0\"^^xsd:double";
    public static final String LABEL = "http://www.w3.org/2000/01/rdf-schema#label";
    public static final String LAB = "rdfs:label";
    public static final String TOP = "http://www.w3.org/2002/07/owl#Thing";
    public static final String THING = "owl:Thing";
    public static final String TOPDT = "http://www.w3.org/2002/07/owl#topDataProperty";
    public static final String TDT = "owl:topDataProperty";
    public static final String TOPOP = "http://www.w3.org/2002/07/owl#topObjectProperty";
    public static final String TOPO = "owl:topObjectProperty";
    public static final String VAR6 = "Variable(<urn:test#var6>)";
    public static final String VAR5 = "Variable(<urn:test#var5>)";
    public static final String VAR4 = "Variable(<urn:test#var4>)";
    public static final String VAR3 = "Variable(<urn:test#var3>)";
    public static final String v34 =        "BuiltInAtom(<urn:test#v1> Variable(<urn:test#var3>) Variable(<urn:test#var4>))";
    public static final String v1 =        "BuiltInAtom(" + TEST_IRI + " Variable(<urn:test#var1>))";
    public static final String v2 =        "SameAsAtom(Variable(<urn:test#var2>) " + TEST_IRI + ")";
    public static final String VAR1 = "Variable(<urn:test#var1>)";
    public static final String VAR2 = "Variable(<urn:test#var2>)";
    public static final String var236 =        "BuiltInAtom(<urn:test#v2> Variable(<urn:test#var5>) Variable(<urn:test#var6>))";
    public static final String diffvar2 =        "DifferentFromAtom(Variable(<urn:test#var2>) " + TEST_I + ")";
    public static final String dlsaferule =        "DLSafeRule(" + ANN_TEST + ") Body(BuiltInAtom(<urn:test#v1> Variable(<urn:test#var3>) Variable(<urn:test#var4>)) ClassAtom(<http://www.semanticweb.org/owlapi/test#C> Variable(<urn:test#var2>)) DataRangeAtom(<http://www.semanticweb.org/owlapi/test#DT> Variable(<urn:test#var1>)) BuiltInAtom(" + TEST_IRI + " Variable(<urn:test#var1>)) DifferentFromAtom(Variable(<urn:test#var2>) <http://www.semanticweb.org/owlapi/test#i>) SameAsAtom(Variable(<urn:test#var2>) " + TEST_IRI + ")) Head(BuiltInAtom(<urn:test#v2> Variable(<urn:test#var5>) Variable(<urn:test#var6>)) DataPropertyAtom(<http://www.semanticweb.org/owlapi/test#p> Variable(<urn:test#var2>) " + FALSE + ") ObjectPropertyAtom(<http://example.com/objectProperty> Variable(<urn:test#var2>) Variable(<urn:test#var2>))))";
    public static final String classvar2 =        "ClassAtom(" + TEST_C + " Variable(<urn:test#var2>))";
    public static final String TO_DL = "(∃ q.B) ⊓ (∀ p.A)";
    public static final String TO_MANCHESTER_PREFIX = "(:q some :B)\n and (:p only :A)";
    public static final String TO_LATEX = "\\ensuremath{\\exists}q.B~\\ensuremath{\\sqcap}~\\ensuremath{\\forall}p.A";
    public static final String TO_MANCHESTER = "(<http://www.semanticweb.org/owlapi/test#q> some <http://www.semanticweb.org/owlapi/test#B>)\n and (<http://www.semanticweb.org/owlapi/test#p> only <http://www.semanticweb.org/owlapi/test#A>)";
    public static final String TO_FUNCTIONAL = "ObjectIntersectionOf(ObjectSomeValuesFrom(<http://www.semanticweb.org/owlapi/test#q> <http://www.semanticweb.org/owlapi/test#B>) ObjectAllValuesFrom(<http://www.semanticweb.org/owlapi/test#p> <http://www.semanticweb.org/owlapi/test#A>))";
    public static final String RULE = "DLSafeRule(Body(BuiltInAtom(<urn:test#v1> Variable(<urn:test#var3>) Variable(<urn:test#var4>))) Head(BuiltInAtom(<urn:test#v2> Variable(<urn:test#var5>) Variable(<urn:test#var6>))))";
    public static final String SHORTRULE = "DLSafeRule(Body(BuiltInAtom(<urn:test#v1> Variable(<urn:test#var3>) Variable(<urn:test#var4>))) Head(BuiltInAtom(<urn:test#v2> Variable(<urn:test#var5>) Variable(<urn:test#var6>))))";
    public static final String nnfrule = "DLSafeRule(Body(BuiltInAtom(<urn:test#v1> Variable(<urn:test#var3>) Variable(<urn:test#var4>))) Head(BuiltInAtom(<urn:test#v2> Variable(<urn:test#var5>) Variable(<urn:test#var6>))))";
    public static final String strtransrule = "DLSafeRule(Body(BuiltInAtom(<urn:test#v1> Variable(<urn:test#var3>) Variable(<urn:test#var4>))) Head(BuiltInAtom(<urn:test#v2> Variable(<urn:test#var5>) Variable(<urn:test#var6>))))";
    public static final String nnfdRangeRestrict = "DataPropertyRange(" + TEST_P + " DatatypeRestriction(xsd:double facetRestriction(minExclusive \"5.0\"^^xsd:double) facetRestriction(maxExclusive \"6.0\"^^xsd:double)))";
    public static final String AOMAX = "ClassAssertion(" + ANN_TEST + ") ObjectMaxCardinality(1 " + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String AOMIN = "ClassAssertion(" + ANN_TEST + ") ObjectMinCardinality(1 " + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String ASSMAX = "ClassAssertion(" + ANN_TEST + ") ObjectMaxCardinality(1 " + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String ASSMIN = "ClassAssertion(" + ANN_TEST + ") ObjectMinCardinality(1 " + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String AOEQ = "ClassAssertion(" + ANN_TEST + ") ObjectExactCardinality(1 " + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String ASSEQ = "ClassAssertion(" + ANN_TEST + ") ObjectExactCardinality(1 " + EX_OP + " " + TEST_C + ") " + TEST_I + ")";
    public static final String ADMAX = "ClassAssertion(" + ANN_TEST + ") DataMaxCardinality(1 " + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String ADMIN = "ClassAssertion(" + ANN_TEST + ") DataMinCardinality(1 " + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String assDMax = "ClassAssertion(" + ANN_TEST + ") DataMaxCardinality(1 " + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String assDMin = "ClassAssertion(" + ANN_TEST + ") DataMinCardinality(1 " + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String ADEQ = "ClassAssertion(" + ANN_TEST + ") DataExactCardinality(1 " + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String assDEq = "ClassAssertion(" + ANN_TEST + ") DataExactCardinality(1 " + TEST_P + " " + TEST_DT + ") " + TEST_I + ")";
    public static final String HASKEY = "HasKey(" + ANN_TEST + ") " + TEST_C + " (" + EX_OP + " " + TEST_IRI + ") (" + TEST_P + "))";
    public static final String nnfhasKey = "HasKey(" + ANN_TEST + ") " + TEST_C + " (" + EX_OP + " " + TEST_IRI + ") (" + TEST_P + "))";
    public static final String strtranshasKey = "HasKey(" + ANN_TEST + ") " + TEST_C + " (" + EX_OP + " " + TEST_IRI + ") (" + TEST_P + "))";
    public static final String ONTO = "Ontology(OntologyID(OntologyIRI(<http://www.semanticweb.org/owlapi/test#test>) VersionIRI(<null>)) [Axioms: 0] [Logical axioms: 0])";
    public static final String strtransdRangeRestrict = "SubClassOf(owl:Thing DataAllValuesFrom(" + TEST_P + " DatatypeRestriction(xsd:double facetRestriction(minExclusive \"5.0\"^^xsd:double) facetRestriction(maxExclusive \"6.0\"^^xsd:double))))";
    public static final String nnfassEq = "ClassAssertion(ObjectIntersectionOf(ObjectMinCardinality(1 " + EX_OP + " " + TEST_C + ") ObjectMaxCardinality(1 " + EX_OP + " " + TEST_C + ")) " + TEST_I + ")";
    public static final String nnfassDEq = "ClassAssertion(ObjectIntersectionOf(DataMinCardinality(1 " + TEST_P + " " + TEST_DT + ") DataMaxCardinality(1 " + TEST_P + " " + TEST_DT + ")) " + TEST_I + ")";
    public static final String brokenOnto = "@prefix f:    <http://www.semanticweb.org/owlapi/test#> . f:r f:propA f: .";
    public static final String labelFirst = "<http://example.org/ont> <http://www.w3.org/2000/01/rdf-schema#label> \"An ontology\" ; a <http://www.w3.org/2002/07/owl#Ontology> . ";
    public static final String ontFirst = "<http://example.org/ont> a <http://www.w3.org/2002/07/owl#Ontology> ; <http://www.w3.org/2000/01/rdf-schema#label> \"An ontology\" . ";
    public static final String MINMAX = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DatatypeRestriction(xsd:double facetRestriction(minExclusive \"5.0\"^^xsd:double) facetRestriction(maxExclusive \"6.0\"^^xsd:double)))";
    public static final String dRangeRestrict = "DataPropertyRange(" + ANN_TEST + ") " + TEST_P + " DatatypeRestriction(xsd:double facetRestriction(minExclusive \"5.0\"^^xsd:double) facetRestriction(maxExclusive \"6.0\"^^xsd:double)))";
    public static final List<String> CORNERCASES = Arrays.asList("DataPropertyRange(<http://www.w3.org/2002/03owlt/oneOf/premises004#p> DataOneOf(\"1\"^^xsd:integer \"2\"^^xsd:integer \"3\"^^xsd:integer \"4\"^^xsd:integer))", "Declaration(DataProperty(<http://www.w3.org/2002/03owlt/oneOf/premises004#p>))", "ClassAssertion(owl:Thing <http://www.w3.org/2002/03owlt/oneOf/premises004#i>)", "DataPropertyRange(<http://www.w3.org/2002/03owlt/oneOf/premises004#p> DataOneOf(\"4\"^^xsd:integer \"5\"^^xsd:integer \"6\"^^xsd:integer))", "ClassAssertion(DataMinCardinality(1 <http://www.w3.org/2002/03owlt/oneOf/premises004#p> rdfs:Literal) <http://www.w3.org/2002/03owlt/oneOf/premises004#i>)");
    public static final String REWIND = "<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:owl=\"http://www.w3.org/2002/07/owl#\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\" xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\">\n<owl:Ontology/>\n    <owl:Class rdf:about=\"http://example.com/Person\">\n        <owl:hasKey rdf:parseType=\"Collection\">\n            <owl:ObjectProperty rdf:about=\"http://example.com/objectPoperty\"/>\n            <owl:DatatypeProperty rdf:about=\"http://example.com/dataProperty\"/>\n        </owl:hasKey>\n    </owl:Class>\n    <owl:ObjectProperty rdf:about=\"http://example.com/objectProperty\"/>\n</rdf:RDF>";
  //@formatter:on
}
